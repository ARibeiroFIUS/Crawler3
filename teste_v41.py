#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Teste da Vers√£o V4.1 Ultra-Precisa
==================================
Demonstra como eliminar falsos positivos
"""

from app_maritaca_v2 import (
    extrair_palavras_chave_simples, 
    buscar_palavras_chave_no_texto_rigoroso,
    eh_falso_positivo
)

def teste_ultra_precisao():
    """Testa a vers√£o ultra-precisa"""
    
    print("üéØ TESTE: Vers√£o V4.1 Ultra-Precisa")
    print("="*60)
    
    # Texto problem√°tico que causava falsos positivos
    texto_pdf = """
    CONTRATO DE FORNECIMENTO
    
    Empresa contratada: Viapol Ltda
    CNPJ: 12.345.678/0001-90
    
    A empresa Viapol √© respons√°vel pelo fornecimento de materiais
    de constru√ß√£o para o projeto XYZ.
    
    Outras informa√ß√µes sobre EMS n√£o se aplicam aqui.
    Via de regra, todos os contratos devem ser assinados.
    Pol n√£o tem rela√ß√£o com este contrato.
    """
    
    # Casos de teste
    casos_teste = [
        ("Viapol Ltda", "Deveria ENCONTRAR"),
        ("EMS S.A.", "N√ÉO deveria encontrar (contexto irrelevante)"),
        ("Via Pol Materiais", "N√ÉO deveria encontrar (palavras separadas)"),
        ("QGC Engenharia", "N√ÉO deveria encontrar (n√£o existe no texto)"),
        ("Materiais Ltda", "Poderia encontrar (palavra gen√©rica presente)")
    ]
    
    print("RESULTADOS:")
    print("-" * 60)
    
    for nome_cliente, expectativa in casos_teste:
        # Extrair palavras-chave
        palavras_chave = extrair_palavras_chave_simples(nome_cliente)
        
        # Buscar no texto
        resultado = buscar_palavras_chave_no_texto_rigoroso(palavras_chave, texto_pdf, 95)
        
        # Status
        status = "‚úÖ ENCONTRADO" if resultado['found'] else "‚ùå N√ÉO ENCONTRADO"
        
        print(f"\n{nome_cliente}")
        print(f"  Palavras-chave: {palavras_chave}")
        print(f"  {status} - Confian√ßa: {resultado['confidence']}%")
        print(f"  Expectativa: {expectativa}")
        
        if resultado['found']:
            print(f"  Palavras encontradas: {resultado['palavras_encontradas']}")
            print(f"  Contexto: {resultado['context'][:80]}...")
        
        # Verificar se atendeu a expectativa
        deveria_encontrar = "Deveria ENCONTRAR" in expectativa
        encontrou = resultado['found']
        
        if deveria_encontrar == encontrou:
            print(f"  ‚úÖ CORRETO!")
        else:
            print(f"  ‚ùå PROBLEMA: Expectativa n√£o atendida!")

def teste_deteccao_falsos_positivos():
    """Testa a detec√ß√£o espec√≠fica de falsos positivos"""
    
    print("\n\nüõ°Ô∏è TESTE: Detec√ß√£o de Falsos Positivos")
    print("="*60)
    
    casos_contexto = [
        ("ems", "Outras informa√ß√µes sobre EMS n√£o se aplicam aqui", True),
        ("ems", "A empresa EMS Ltda √© respons√°vel pelo projeto", False),
        ("via", "Via de regra, todos os contratos devem ser assinados", True),
        ("via", "Empresa Via Expressa Ltda", False),
        ("pol", "Pol n√£o tem rela√ß√£o com este contrato", True),
        ("pol", "Empresa Pol Materiais Ltda", False)
    ]
    
    for palavra, contexto, deveria_ser_falso_positivo in casos_contexto:
        eh_falso = eh_falso_positivo(palavra, contexto.lower(), contexto.lower().find(palavra))
        
        status = "üõ°Ô∏è FALSO POSITIVO DETECTADO" if eh_falso else "‚úÖ LEG√çTIMO"
        expectativa = "Deveria detectar falso positivo" if deveria_ser_falso_positivo else "Deveria ser leg√≠timo"
        
        print(f"\nPalavra: '{palavra}'")
        print(f"Contexto: '{contexto}'")
        print(f"{status}")
        print(f"Expectativa: {expectativa}")
        
        if eh_falso == deveria_ser_falso_positivo:
            print("‚úÖ CORRETO!")
        else:
            print("‚ùå PROBLEMA!")

def comparacao_versoes():
    """Compara todas as vers√µes"""
    
    print("\n\n‚öñÔ∏è COMPARA√á√ÉO: V3.0 vs V4.0 vs V4.1")
    print("="*60)
    
    texto_teste = """
    Empresa: Viapol Ltda
    Outras informa√ß√µes sobre EMS n√£o se aplicam.
    Via de regra, contratos s√£o importantes.
    """
    
    casos = ["Viapol", "EMS S.A.", "Via Pol"]
    
    print("Cliente        | V3.0  | V4.0  | V4.1  | Ideal")
    print("-" * 50)
    
    for cliente in casos:
        # V3.0 (importar da vers√£o antiga)
        try:
            from app import match_client_in_text
            resultado_v3 = match_client_in_text(cliente, texto_teste, 80)
            v3_status = "‚úÖ" if resultado_v3['found'] else "‚ùå"
        except:
            v3_status = "?"
        
        # V4.0 (vers√£o com palavras-chave b√°sica)
        try:
            from app_maritaca import buscar_palavras_chave_no_texto, extrair_palavras_chave_simples as extract_v4
            palavras_v4 = extract_v4(cliente)
            resultado_v4 = buscar_palavras_chave_no_texto(palavras_v4, texto_teste, 85)
            v4_status = "‚úÖ" if resultado_v4['found'] else "‚ùå"
        except:
            v4_status = "?"
        
        # V4.1 (vers√£o ultra-precisa)
        palavras_v41 = extrair_palavras_chave_simples(cliente)
        resultado_v41 = buscar_palavras_chave_no_texto_rigoroso(palavras_v41, texto_teste, 95)
        v41_status = "‚úÖ" if resultado_v41['found'] else "‚ùå"
        
        # Ideal (o que deveria acontecer)
        ideal = "‚úÖ" if cliente == "Viapol" else "‚ùå"
        
        print(f"{cliente:<14} | {v3_status:<4} | {v4_status:<4} | {v41_status:<4} | {ideal}")

if __name__ == "__main__":
    print("üéØ TESTE COMPLETO - CRAWLER PDF V4.1 ULTRA-PRECISO")
    print("="*70)
    
    teste_ultra_precisao()
    teste_deteccao_falsos_positivos()
    comparacao_versoes()
    
    print("\n" + "="*70)
    print("üìä RESUMO:")
    print("‚Ä¢ V4.1 elimina falsos positivos atrav√©s de an√°lise de contexto")
    print("‚Ä¢ Usa regex com delimitadores de palavra (\\b)")
    print("‚Ä¢ Detecta padr√µes espec√≠ficos de falsos positivos")
    print("‚Ä¢ Threshold m√≠nimo de 90% para m√°xima precis√£o")
    print("‚Ä¢ Ideal para casos onde precis√£o √© mais importante que recall")
    print("\nüöÄ Para usar a interface: python3 app_maritaca_v2.py") 